// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ClubTagsagNyilvantartas;
//
//    var member = Member.FromJson(jsonString);

namespace ClubTagsagNyilvantartas
{
    using System;
    using System.Collections.Generic;

    using System.ComponentModel;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Member : INotifyPropertyChanged
    {
        private long id;
        private string entry;
        private int rating;
        private string fullname;
        private string interest;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        [JsonProperty("id")]
        public long Id
        {
            get { return id; }
            set
            {
                if (id != value)
                {
                    id = value;
                    OnPropertyChanged(nameof(Id));
                }
            }
        }

        [JsonProperty("entry")]
        public string Entry
        {
            get { return entry; }
            set
            {
                if (entry != value)
                {
                    entry = value;
                    OnPropertyChanged(nameof(Entry));
                }
            }
        }

        [JsonProperty("rating")]
        public int Rating
        {
            get { return rating; }
            set
            {
                if (rating != value)
                {
                    rating = value;
                    OnPropertyChanged(nameof(Rating));
                }
            }
        }

        [JsonProperty("fullname")]
        public string Fullname
        {
            get { return fullname; }
            set
            {
                if (fullname != value)
                {
                    fullname = value;
                    OnPropertyChanged(nameof(Fullname));
                }
            }
        }

        [JsonProperty("interest")]
        public string Interest
        {
            get { return interest; }
            set
            {
                if (interest != value)
                {
                    interest = value;
                    OnPropertyChanged(nameof(Interest));
                }
            }
        }

        public static Member[] FromJson(string json) => JsonConvert.DeserializeObject<Member[]>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Member[] self) => JsonConvert.SerializeObject(self, ClubTagsagNyilvantartas.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
